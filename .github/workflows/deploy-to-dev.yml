name: 개발 배포

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: [ self-hosted, "dev" ]
    environment: develop
    timeout-minutes: 10

    env:
      DEV_URL: ${{ secrets.DEV_URL }}
      ADMIN_URL: ${{ secrets.ADMIN_URL }}

    defaults:
      run:
        shell: bash

    steps:
      - name: set SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519

      - name: Checkout application-dev.yml to config path
        uses: actions/checkout@v4
        with:
          repository: '${{ secrets.CONFIG_REPOSITORY }}'
          token: '${{ secrets.TOKEN }}'
          path: config
          sparse-checkout: |
            application-dev.yml
          sparse-checkout-cone-mode: false

      - name: Copy application-dev.yml to Local
        run: |
          mkdir -p /home/ubuntu/app
          cp config/application-dev.yml /home/ubuntu/app/application-dev.yml

      - name: Checkout Main Repository with Submodules
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
          fetch-depth: 0

      - name: Update submodules to latest commit
        run: |
          git submodule update --init --remote --checkout

      - name: Log submodule commit hash
        if: always()
        run: |
          echo "Current commit of allcll-crawler:"
          git -C allcll-crawler rev-parse HEAD

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle Wrapper
        run: ./gradlew build

      - name: Copy JAR to Local
        run: |
          mkdir -p /home/ubuntu/app
          cp build/libs/*-SNAPSHOT.jar /home/ubuntu/app/server.jar

      - name: Stop Existing Application
        run: |
          set -x
          PID=$(pgrep -f "server.jar" || true)
          if [ -n "$PID" ]; then
            echo "Stopping existing application..."
            sudo kill -9 $PID
          else
            echo "No existing application found."
          fi

      - name: Run Application
        run: |
          echo "Creating logs directory..."
          mkdir -p /home/ubuntu/app/logs
          
          echo "Starting new application..."
          sudo nohup java -Dspring.profiles.active=dev \
          -Dspring.config.location=/home/ubuntu/app/application-dev.yml \
          -Duser.timezone=Asia/Seoul \
          -Dlogging.file.path=/home/ubuntu/app/logs \
          -jar /home/ubuntu/app/server.jar & 
